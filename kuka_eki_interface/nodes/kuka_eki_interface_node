#!/usr/bin/env python

import numpy as np

import rospy
import tf

from kuka_eki_interface import EKIDriver, Axis, Pos

from kuka_eki_msgs.msg import KrlAxis, KrlPos

from kuka_eki_msgs.srv import LinPos, LinPosRequest, LinPosResponse
from kuka_eki_msgs.srv import PtpAxis, PtpAxisRequest, PtpAxisResponse
from kuka_eki_msgs.srv import PtpPos, PtpPosRequest, PtpPosResponse
from kuka_eki_msgs.srv import RsiAxis, RsiAxisRequest, RsiAxisResponse


class EKINode(object):

    def __init__(self, name, addr):
        self._ptp_axis_service = rospy.Service(
            name + '/ptp_axis', PtpAxis, self._ptp_axis)

        self._ptp_cart_service = rospy.Service(
            name + '/ptp_pos', PtpPos, self._ptp_pos)

        self._lin_cart_rel_service = rospy.Service(
            name + '/lin_pos', LinPos, self._lin_pos)

        self._ptp_cart_service = rospy.Service(
            name + '/rsi_axis', RsiAxis, self._start_rsi_axis)

        self._driver = EKIDriver(addr)
        self._driver.start()

    def _ptp_axis(self, req):
        cmd = Axis()
        cmd.a1 = req.axis.a1
        cmd.a2 = req.axis.a2
        cmd.a3 = req.axis.a3
        cmd.a4 = req.axis.a4
        cmd.a5 = req.axis.a5
        cmd.a6 = req.axis.a6
        self._driver.ptp(cmd, req.max_velocity_scaling)
        return PtpAxisResponse()

    def _lin_pos(self, req):
        cmd = Pos()
        cmd.x = req.pos.x
        cmd.y = req.pos.y
        cmd.z = req.pos.z
        cmd.a = req.pos.a
        cmd.b = req.pos.b
        cmd.c = req.pos.c
        self._driver.lin(cmd, req.max_velocity_scaling)
        return LinPosResponse()

    def _ptp_pos(self, req):
        cmd = Pos()
        cmd.x = req.pos.x
        cmd.y = req.pos.y
        cmd.z = req.pos.z
        cmd.a = req.pos.a
        cmd.b = req.pos.b
        cmd.c = req.pos.c
        self._driver.ptp(cmd, req.max_velocity_scaling)
        return PtpPosResponse()

    def _start_rsi_axis(self, req):
        self._driver.start_rsi_axis()
        return RsiAxisResponse()


if __name__ == '__main__':
    name = 'kuka_eki_interface'
    rospy.init_node(name)
    robot_ip = rospy.get_param('/eki/robot_ip')
    robot_port = rospy.get_param('/eki/robot_port')
    eki_node = EKINode(name, (robot_ip, int(robot_port)))
    rospy.spin()
